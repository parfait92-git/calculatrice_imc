{"ast":null,"code":"import * as imcSvc from './services/imc.service';\nimport ImcSchema from '../../models/Imc';\nimport connectDB from '../../utils/connectDB';\nimport valid from '../../utils/valid';\nconnectDB();\nexport default async function handler(req, res) {\n  if (req.method === 'POST') {\n    console.log(req);\n    const poids = req.body.poids;\n    const taille = req.body.taille;\n    const imc = imcSvc.CalculImc(taille, poids);\n    res.status(200).json(imc);\n    await saveIndice(imc, res);\n  }\n\n  if (req.methode === \"GET\") {\n    await getIndices(req, res);\n  }\n}\n\nconst saveIndice = async (req, res) => {\n  try {\n    const {\n      taille,\n      poids,\n      careeTaille,\n      imc,\n      poids_normal\n    } = req.body;\n    const errMsg = valid(taille, poids);\n\n    if (errMsg) {\n      return res.status(400).json({\n        err: errMsg\n      });\n    }\n\n    const newIndice = new ImcSchema({\n      taille,\n      poids\n    });\n    await newIndice.save();\n    res.json({\n      \"message\": \"succes d'enregistrement!\"\n    });\n  } catch (error) {\n    return res.status(500);\n  }\n};\n\nconst getIndices = async (req, res) => {\n  try {\n    const indices = await ImcSchema.find();\n    res.json({\n      status: 'success',\n      result: indices.length,\n      indices\n    });\n  } catch (error) {\n    return res.status(500).json({\n      err: error.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/aristant/Music/start_with_nextjs/calculatrice_imc/pages/api/imc.js"],"names":["imcSvc","ImcSchema","connectDB","valid","handler","req","res","method","console","log","poids","body","taille","imc","CalculImc","status","json","saveIndice","methode","getIndices","careeTaille","poids_normal","errMsg","err","newIndice","save","error","indices","find","result","length","message"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,wBAAxB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AAEAD,SAAS;AAET,eAAe,eAAeE,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC9C,MAAGD,GAAG,CAACE,MAAJ,KAAe,MAAlB,EAA0B;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACA,UAAMK,KAAK,GAAGL,GAAG,CAACM,IAAJ,CAASD,KAAvB;AACA,UAAME,MAAM,GAAGP,GAAG,CAACM,IAAJ,CAASC,MAAxB;AACA,UAAMC,GAAG,GAAGb,MAAM,CAACc,SAAP,CAAiBF,MAAjB,EAAyBF,KAAzB,CAAZ;AACAJ,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,GAArB;AACA,UAAMI,UAAU,CAACJ,GAAD,EAAMP,GAAN,CAAhB;AACD;;AACD,MAAGD,GAAG,CAACa,OAAJ,KAAc,KAAjB,EAAwB;AACtB,UAAMC,UAAU,CAACd,GAAD,EAAMC,GAAN,CAAhB;AACD;AAEF;;AAED,MAAMW,UAAU,GAAG,OAAOZ,GAAP,EAAYC,GAAZ,KAAoB;AACrC,MAAI;AACA,UAAM;AAAEM,MAAAA,MAAF;AAAUF,MAAAA,KAAV;AAAiBU,MAAAA,WAAjB;AAA8BP,MAAAA,GAA9B;AAAmCQ,MAAAA;AAAnC,QAAoDhB,GAAG,CAACM,IAA9D;AACA,UAAMW,MAAM,GAAGnB,KAAK,CAACS,MAAD,EAASF,KAAT,CAApB;;AACA,QAAGY,MAAH,EAAW;AACP,aAAOhB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACO,QAAAA,GAAG,EAAED;AAAN,OAArB,CAAP;AACH;;AACD,UAAME,SAAS,GAAG,IAAIvB,SAAJ,CAAc;AAC5BW,MAAAA,MAD4B;AAE5BF,MAAAA;AAF4B,KAAd,CAAlB;AAIA,UAAMc,SAAS,CAACC,IAAV,EAAN;AACAnB,IAAAA,GAAG,CAACU,IAAJ,CAAS;AAAC,iBAAW;AAAZ,KAAT;AACH,GAZD,CAYE,OAAOU,KAAP,EAAc;AACZ,WAAOpB,GAAG,CAACS,MAAJ,CAAW,GAAX,CAAP;AACH;AACF,CAhBD;;AAkBA,MAAMI,UAAU,GAAG,OAAOd,GAAP,EAAYC,GAAZ,KAAoB;AACrC,MAAI;AACA,UAAMqB,OAAO,GAAG,MAAM1B,SAAS,CAAC2B,IAAV,EAAtB;AACAtB,IAAAA,GAAG,CAACU,IAAJ,CAAS;AACLD,MAAAA,MAAM,EAAE,SADH;AAELc,MAAAA,MAAM,EAAEF,OAAO,CAACG,MAFX;AAGLH,MAAAA;AAHK,KAAT;AAKH,GAPD,CAOE,OAAOD,KAAP,EAAc;AACZ,WAAOpB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACO,MAAAA,GAAG,EAAEG,KAAK,CAACK;AAAZ,KAArB,CAAP;AACH;AACF,CAXD","sourcesContent":["import * as imcSvc from './services/imc.service';\r\nimport ImcSchema from '../../models/Imc';\r\nimport connectDB from '../../utils/connectDB';\r\nimport valid from '../../utils/valid';\r\n\r\nconnectDB();\r\n\r\nexport default async function handler(req, res) {\r\n  if(req.method === 'POST') {\r\n    console.log(req);\r\n    const poids = req.body.poids;\r\n    const taille = req.body.taille;\r\n    const imc = imcSvc.CalculImc(taille, poids);\r\n    res.status(200).json(imc)\r\n    await saveIndice(imc, res);\r\n  }\r\n  if(req.methode===\"GET\") {\r\n    await getIndices(req, res);\r\n  }\r\n  \r\n}\r\n\r\nconst saveIndice = async (req, res) => {\r\n  try {\r\n      const { taille, poids, careeTaille, imc, poids_normal } = req.body;\r\n      const errMsg = valid(taille, poids);\r\n      if(errMsg) {\r\n          return res.status(400).json({err: errMsg})\r\n      }\r\n      const newIndice = new ImcSchema({ \r\n          taille, \r\n          poids, \r\n      });\r\n      await newIndice.save();\r\n      res.json({\"message\": \"succes d'enregistrement!\"});\r\n  } catch (error) {\r\n      return res.status(500);\r\n  }\r\n}\r\n\r\nconst getIndices = async (req, res) => {\r\n  try {\r\n      const indices = await ImcSchema.find();\r\n      res.json({\r\n          status: 'success',\r\n          result: indices.length,\r\n          indices\r\n      })\r\n  } catch (error) {\r\n      return res.status(500).json({err: error.message});\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}